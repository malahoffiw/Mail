generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model File {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  name       String
  data       Bytes
  message    Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId  String
}

model Message {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  subject     String
  body        String
  author      User      @relation(name: "author", fields: [authorId], references: [id])
  authorId    String
  recipient   User?     @relation(name: "recipient", fields: [recipientId], references: [id])
  recipientId String?
  read        Boolean   @default(false)
  starred     Boolean   @default(false)
  deleted     Boolean   @default(false)
  isDraft     Boolean   @default(false)
  files       File[]
  replyTo     Message?  @relation(name: "replyTo", fields: [replyToId], references: [id])
  replyToId   String?
  replies     Message[] @relation(name: "replyTo")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  username       String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  sentMessages   Message[] @relation(name: "author")
  inboxMessages  Message[] @relation(name: "recipient")
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
