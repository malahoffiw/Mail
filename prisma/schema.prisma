generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  subject              String
  body                 String
  author               User      @relation(name: "author", fields: [authorId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  authorId             String
  recipient            User?     @relation(name: "recipient", fields: [recipientId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  recipientId          String?
  read                 Boolean   @default(false)
  isDraft              Boolean   @default(false)
  starredByAuthor      Boolean   @default(false)
  starredByRecipient   Boolean   @default(false)
  deletedByAuthor      Boolean   @default(false)
  deletedByRecipient   Boolean   @default(false)
  trashByAuthor        Boolean   @default(false)
  trashByRecipient     Boolean   @default(false)
  replyTo              Message?  @relation(name: "replyTo", fields: [replyToId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  replyToId            String?
  replies              Message[] @relation(name: "replyTo")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  sentMessages   Message[] @relation(name: "author")
  inboxMessages  Message[] @relation(name: "recipient")
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}